#
# Automated Testing Framework (atf)
#
# Copyright (c) 2007 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Julio M. Merino Vidal, developed as part of Google's Summer of Code
# 2007 program.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this
#    software must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND
# CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

Test_Case=""
Test_Cases=""

atf_add_test_case()
{
    local tc="${1}"
    Test_Cases="${Test_Cases} ${tc}"
}

atf_pass()
{
    echo "${Test_Case}, passed"
    exit 0
}

atf_skip()
{
    local reason="${1}"
    echo "${Test_Case}, skipped, ${reason}"
    exit 0
}

atf_fail()
{
    local reason="${1}"
    echo "${Test_Case}, failed, ${reason}"
    exit 1
}

atf_get()
{
    eval echo \${__tc_var_${Test_Case}_${1}}
}

atf_set()
{
    eval __tc_var_${Test_Case}_${1}=\"\${2}\"
}

run_test_case()
{
    _tc="${1}"

    Test_Case="${_tc}"

    atf_set "isolated" "no"
    ${_tc}_head

    if [ $(atf_get isolated) = yes ]; then
        mkdir testdir
        _out=$(cd testdir ; ${_tc}_body)
        _ret=$?
        rm -rf testdir
    else
        _out=$(${_tc}_body)
        _ret=$?
    fi

    if [ -z "${_out}" ]; then
        echo "${_tc}, failed, BOGUS TEST; DID NOT RETURN ANY RESULT"
        _ret=1
    else
        echo ${_out}
    fi

    return ${_ret}
}

usage()
{
    cat <<EOF
Usage: ${Prog_Name} [options] [test_case1 [.. test_caseN]]

This is an independent atf test program.

Available options:
    -h    Shows this help message
    -l    List test cases and their purpose

EOF

    exit 0
}

syntax_error()
{
    echo "Syntax error: ${@}" 1>&2
    echo "Type \`${Prog_Name} -h' for more details." 1>&2
    exit 1
}

main()
{
    _lflag=false

    while getopts :hl arg; do
        case ${arg} in
        h)
            usage
            # NOTREACHED
            ;;

        l)
            _lflag=true
            ;;

        \?)
            syntax_error "Unknown option -${OPTARG}."
            # NOTREACHED
            ;;
        esac
    done
    shift `expr ${OPTIND} - 1`

    atf_init_test_cases

    # TODO Implement _lflag.

    ok=true
    local tc tcs
    if [ ${#} -gt 0 ]; then
        tcs=${@}
    else
        tcs=${Test_Cases}
    fi
    for tc in ${tcs}
    do
        if run_test_case ${tc}; then
            :
        else
            ok=false
        fi
    done

    ${ok}
}

main "${@}"
